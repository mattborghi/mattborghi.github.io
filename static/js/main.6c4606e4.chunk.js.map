{"version":3,"sources":["components/Header.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","useState","alert","setAlert","resumeData","Fragment","id","className","href","title","alt","name","style","color","fontFamily","role","roleDescription","socialLinks","map","item","url","target","rel","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","message","autoHideDuration","Data","imagebaseurl","linkedinId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"sOAGe,SAASA,EAAOC,GAAQ,IAAD,EACVC,oBAAS,GADC,mBAC7BC,EAD6B,KACtBC,EADsB,KAE5BC,EAAeJ,EAAfI,WAER,OACE,eAAC,IAAMC,SAAP,WACE,yBAAQC,GAAG,OAAX,UACE,sBAAKA,GAAG,WAAR,UACE,mBAAGC,UAAU,aAAaC,KAAK,YAAYC,MAAM,kBAAjD,6BAGA,mBAAGF,UAAU,aAAaC,KAAK,IAAIC,MAAM,kBAAzC,6BAGA,qBAAIH,GAAG,MAAMC,UAAU,MAAvB,UACE,oBAAIA,UAAU,UAAd,SACE,mBAAGC,KAAK,QAAQE,IAAI,OAApB,oBAIF,6BACE,mBAAGF,KAAK,kCAAkCE,IAAI,KAA9C,kBAIF,6BACE,mBAAGF,KAAK,sCAAsCE,IAAI,SAAlD,oBAIF,6BACE,mBACEF,KAAK,wCACLE,IAAI,WAFN,wBAQF,6BACE,mBACEF,KAAK,wCACLE,IAAI,kBAFN,sBAOF,6BACE,mBAAGF,KAAK,sCAAsCE,IAAI,SAAlD,4BAON,qBAAKH,UAAU,aAAf,SACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,sBAAd,iCACA,qBAAIA,UAAU,sBAAd,cAAsCH,EAAWO,KAAjD,OACA,qBAAIC,MAAO,CAAEC,MAAO,OAAQC,WAAY,eAAxC,oBACUV,EAAWW,KADrB,KAC6BX,EAAWY,mBAExC,uBACA,oBAAIT,UAAU,SAAd,SACGH,EAAWa,aACVb,EAAWa,YAAYC,KAAI,SAACC,GAC1B,OACE,6BACE,mBACEX,KAAMW,EAAKC,IACXC,OAAO,SACPC,IAAI,sBAHN,SAKE,mBAAGf,UAAWY,EAAKZ,eANdY,EAAKR,mBAgB5B,cAACY,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDC,KAAMzB,EACN0B,QAAS,kBAAMzB,GAAS,SAACD,GAAD,OAAYA,MACpC2B,QAAQ,4BAERC,iBAAkB,KADd,eC3FZ,IAqBeC,EArBJ,CACTC,aAAc,gCACdrB,KAAM,gBACNI,KAAM,wDACNkB,WAAY,aACZjB,gBACE,yJACFC,YAAa,CACX,CACEN,KAAM,WACNS,IAAK,4CACLb,UAAW,kBAEb,CACEI,KAAM,SACNS,IAAK,+BACLb,UAAW,kBCHF2B,MARf,WACE,OACE,qBAAK3B,UAAU,MAAf,SACE,cAACR,EAAD,CAAQK,WAAY2B,OCINI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvB,c","file":"static/js/main.6c4606e4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nexport default function Header(props) {\n  const [alert, setAlert] = useState(false);\n  const { resumeData } = props;\n\n  return (\n    <React.Fragment>\n      <header id=\"home\">\n        <nav id=\"nav-wrap\">\n          <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">\n            Show navigation\n          </a>\n          <a className=\"mobile-btn\" href=\"#\" title=\"Hide navigation\">\n            Hide navigation\n          </a>\n          <ul id=\"nav\" className=\"nav\">\n            <li className=\"current\">\n              <a href=\"#home\" alt=\"home\">\n                Home\n              </a>\n            </li>\n            <li>\n              <a href=\"https://mattborghi.github.io/CV\" alt=\"cv\">\n                CV\n              </a>\n            </li>\n            <li>\n              <a href=\"https://mattborghi.github.io/myblog\" alt=\"myblog\">\n                Blog\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://mattborghi.github.io/projects\"\n                alt=\"projects\"\n                // onClick={() => setAlert((alert) => !alert)}\n              >\n                Projects\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://mattborghi.github.io/francais\"\n                alt=\"The French Blog\"\n              >\n                French\n              </a>\n            </li>\n            <li>\n              <a href=\"https://mattborghi.github.io/violin\" alt=\"violin\">\n                Violin\n              </a>\n            </li>\n          </ul>\n        </nav>\n\n        <div className=\"row banner\">\n          <div className=\"banner-text\">\n            <h2 className=\"responsive-headline\"> Hello, my name is </h2>\n            <h1 className=\"responsive-headline\"> {resumeData.name}.</h1>\n            <h3 style={{ color: \"#fff\", fontFamily: \"sans-serif \" }}>\n              I am a {resumeData.role}. {resumeData.roleDescription}\n            </h3>\n            <hr />\n            <ul className=\"social\">\n              {resumeData.socialLinks &&\n                resumeData.socialLinks.map((item) => {\n                  return (\n                    <li key={item.name}>\n                      <a\n                        href={item.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <i className={item.className}></i>\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </div>\n        </div>\n      </header>\n\n      <Snackbar\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n        open={alert}\n        onClose={() => setAlert((alert) => !alert)}\n        message=\"Page not yet implemented!\"\n        key=\"snackbar\"\n        autoHideDuration={5000}\n      />\n    </React.Fragment>\n  );\n  // }\n}\n","let Data = {\n  imagebaseurl: \"https://mattborghi.github.io/\",\n  name: \"Matias Borghi\",\n  role: \"Physicist currently working as a Quantitative Analyst\",\n  linkedinId: \"mattborghi\",\n  roleDescription:\n    \"I like solving challenges using algorithms and learning about new technologies. Nowadays, on my free time, I enjoy playing violin and learning french.\",\n  socialLinks: [\n    {\n      name: \"linkedin\",\n      url: \"https://www.linkedin.com/in/borghimatias/\",\n      className: \"fa fa-linkedin\",\n    },\n    {\n      name: \"github\",\n      url: \"http://github.com/mattborghi\",\n      className: \"fa fa-github\",\n    },\n  ],\n};\n\nexport default Data;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from './components/Header';\nimport Data from './Data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header resumeData={Data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}