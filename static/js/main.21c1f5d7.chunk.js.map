{"version":3,"sources":["components/NavigationBar.js","components/Header.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","buttons","id","className","href","title","map","button","name","path","alt","Header","resumeData","useState","alert","setAlert","Fragment","style","color","fontFamily","role","roleDescription","socialLinks","item","url","target","rel","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","message","autoHideDuration","Data","imagebaseurl","linkedinId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8NAEe,SAASA,EAAT,GAAmC,IAAXC,EAAU,EAAVA,QACnC,OACI,sBAAKC,GAAG,WAAR,UACI,mBAAGC,UAAU,aAAaC,KAAK,YAAYC,MAAM,kBAAjD,6BAIA,mBAAGF,UAAU,aAAaC,KAAK,IAAIC,MAAM,kBAAzC,6BAGA,oBAAIH,GAAG,MAAMC,UAAU,MAAvB,SACKF,EAAQK,KAAI,SAAAC,GACT,OACI,oBAAIJ,UAA2B,SAAhBI,EAAOC,KAAkB,UAAY,GAApD,SACI,mBAAGJ,KAAMG,EAAOE,KAAMC,IAAKH,EAAOG,IAAlC,SAAwCH,EAAOC,QADUD,EAAOC,c,YCX7E,SAASG,EAAT,GAA0C,IAAxBC,EAAuB,EAAvBA,WAAYX,EAAW,EAAXA,QAAW,EAC5BY,oBAAS,GADmB,mBAC/CC,EAD+C,KACxCC,EADwC,KAGtD,OACE,eAAC,IAAMC,SAAP,WACE,yBAAQd,GAAG,OAAX,UAEE,cAACF,EAAD,CAAeC,QAASA,IAExB,qBAAKE,UAAU,aAAf,SACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,sBAAd,iCACA,qBAAIA,UAAU,sBAAd,cAAsCS,EAAWJ,KAAjD,OACA,qBAAIS,MAAO,CAAEC,MAAO,OAAQC,WAAY,eAAxC,oBACUP,EAAWQ,KADrB,KAC6BR,EAAWS,mBAExC,uBACA,oBAAIlB,UAAU,SAAd,SACGS,EAAWU,aACVV,EAAWU,YAAYhB,KAAI,SAACiB,GAC1B,OACE,6BACE,mBACEnB,KAAMmB,EAAKC,IACXC,OAAO,SACPC,IAAI,sBAHN,SAKE,mBAAGvB,UAAWoB,EAAKpB,eANdoB,EAAKf,mBAgB5B,cAACmB,EAAA,EAAD,CACEC,aAAc,CAAEC,SAAU,SAAUC,WAAY,SAChDC,KAAMjB,EACNkB,QAAS,kBAAMjB,GAAS,SAACD,GAAD,OAAYA,MACpCmB,QAAQ,4BAERC,iBAAkB,KADd,eC9CZ,IAqBajC,EAAU,CACrB,CACEO,KAAM,OACNC,KAAM,QACNC,IAAK,QAEP,CACEF,KAAM,KACNC,KAAM,kCACNC,IAAK,oBAEP,CACEF,KAAM,OACNC,KAAM,sCACNC,IAAK,oBAEP,CACEF,KAAM,WACNC,KAAM,wCACNC,IAAK,YAEP,CACEF,KAAM,WACNC,KAAM,wCACNC,IAAK,kBAEP,CACEF,KAAM,SACNC,KAAM,sCACNC,IAAK,mBAIMyB,EAtDJ,CACTC,aAAc,gCACd5B,KAAM,gBACNY,KAAM,wDACNiB,WAAY,aACZhB,gBACE,yJACFC,YAAa,CACX,CACEd,KAAM,WACNgB,IAAK,4CACLrB,UAAW,kBAEb,CACEK,KAAM,SACNgB,IAAK,+BACLrB,UAAW,kBCHFmC,MARf,WACE,OACE,qBAAKnC,UAAU,MAAf,SACE,cAACQ,EAAD,CAAQC,WAAYuB,EAAMlC,QAASA,OCIrBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvB,c","file":"static/js/main.21c1f5d7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function NavigationBar({buttons}) {\n    return (\n        <nav id=\"nav-wrap\">\n            <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">\n                Show navigation\n            </a>\n            {/* eslint-disable-next-line  */}\n            <a className=\"mobile-btn\" href=\"#\" title=\"Hide navigation\">\n                Hide navigation\n            </a>\n            <ul id=\"nav\" className=\"nav\">\n                {buttons.map(button => {\n                    return (\n                        <li className={button.name === \"Home\" ? \"current\" : \"\"} key={button.name}>\n                            <a href={button.path} alt={button.alt}>{button.name}</a>\n                        </li>\n                    )\n                }\n                )}\n            </ul>\n        </nav>\n    );\n}","import React, { useState } from \"react\";\nimport NavigationBar from \"./NavigationBar\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nexport default function Header({ resumeData, buttons }) {\n  const [alert, setAlert] = useState(false);\n\n  return (\n    <React.Fragment>\n      <header id=\"home\">\n\n        <NavigationBar buttons={buttons} />\n\n        <div className=\"row banner\">\n          <div className=\"banner-text\">\n            <h2 className=\"responsive-headline\"> Hello, my name is </h2>\n            <h1 className=\"responsive-headline\"> {resumeData.name}.</h1>\n            <h3 style={{ color: \"#fff\", fontFamily: \"sans-serif \" }}>\n              I am a {resumeData.role}. {resumeData.roleDescription}\n            </h3>\n            <hr />\n            <ul className=\"social\">\n              {resumeData.socialLinks &&\n                resumeData.socialLinks.map((item) => {\n                  return (\n                    <li key={item.name}>\n                      <a\n                        href={item.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <i className={item.className}></i>\n                      </a>\n                    </li>\n                  );\n                })}\n            </ul>\n          </div>\n        </div>\n      </header>\n\n      <Snackbar\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n        open={alert}\n        onClose={() => setAlert((alert) => !alert)}\n        message=\"Page not yet implemented!\"\n        key=\"snackbar\"\n        autoHideDuration={5000}\n      />\n    </React.Fragment>\n  );\n}\n","let Data = {\n  imagebaseurl: \"https://mattborghi.github.io/\",\n  name: \"Matias Borghi\",\n  role: \"Physicist currently working as a Quantitative Analyst\",\n  linkedinId: \"mattborghi\",\n  roleDescription:\n    \"I like solving challenges using algorithms and learning about new technologies. Nowadays, on my free time, I enjoy playing violin and learning french.\",\n  socialLinks: [\n    {\n      name: \"linkedin\",\n      url: \"https://www.linkedin.com/in/borghimatias/\",\n      className: \"fa fa-linkedin\",\n    },\n    {\n      name: \"github\",\n      url: \"http://github.com/mattborghi\",\n      className: \"fa fa-github\",\n    },\n  ],\n};\n\nexport const buttons = [\n  {\n    name: \"Home\",\n    path: \"#home\",\n    alt: \"home\"\n  },\n  {\n    name: \"CV\",\n    path: \"https://mattborghi.github.io/CV\",\n    alt: \"Curriculum Vitae\"\n  },\n  {\n    name: \"Blog\",\n    path: \"https://mattborghi.github.io/myblog\",\n    alt: \"My Personal Blog\"\n  },\n  {\n    name: \"Projects\",\n    path: \"https://mattborghi.github.io/projects\",\n    alt: \"Projects\"\n  },\n  {\n    name: \"Francais\",\n    path: \"https://mattborghi.github.io/francais\",\n    alt: \"My French Blog\"\n  },\n  {\n    name: \"Violin\",\n    path: \"https://mattborghi.github.io/violin\",\n    alt: \"My Violin Blog\"\n  },\n]\n\nexport default Data;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from './components/Header';\nimport Data, {buttons} from './Data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header resumeData={Data} buttons={buttons} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}